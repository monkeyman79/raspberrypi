diff --git a/arch/arm/mach-bcm/Kconfig b/arch/arm/mach-bcm/Kconfig
index 46b787a..a793f0d 100644
--- a/arch/arm/mach-bcm/Kconfig
+++ b/arch/arm/mach-bcm/Kconfig
@@ -160,6 +160,13 @@ config ARCH_BCM2835
 	  This enables support for the Broadcom BCM2835 and BCM2836 SoCs.
 	  This SoC is used in the Raspberry Pi and Roku 2 devices.
 
+config BCM2836_CPU_REPARK
+	bool "Repark offline CPUs"
+	depends on ARCH_BCM2835
+	default n
+	help
+	  Repark CPUs not activated on boot to allow starting them later
+
 config ARCH_BCM_53573
 	bool "Broadcom BCM53573 SoC series support"
 	depends on ARCH_MULTI_V7
diff --git a/drivers/irqchip/irq-bcm2836.c b/drivers/irqchip/irq-bcm2836.c
index e10597c..741a28c 100644
--- a/drivers/irqchip/irq-bcm2836.c
+++ b/drivers/irqchip/irq-bcm2836.c
@@ -20,6 +20,11 @@
 #include <linux/irqchip.h>
 #include <linux/irqdomain.h>
 #include <asm/exception.h>
+#ifdef CONFIG_BCM2836_CPU_REPARK
+#include <linux/cpumask.h>
+#include <asm/delay.h>
+#include <asm/cacheflush.h>
+#endif
 
 #define LOCAL_CONTROL			0x000
 #define LOCAL_PRESCALER			0x008
@@ -238,20 +243,229 @@ static int bcm2836_cpu_dying(unsigned int cpu)
 	return 0;
 }
 
+#ifdef CONFIG_BCM2836_CPU_REPARK
+/* Not parked - initally online */
+#define CPU_PARK_NOT_PARKED	0
+/* Parked - MMU disabled */
+#define CPU_PARK_NOMMU		1
+/* Parked - MMU enabled */
+#define CPU_PARK_MMU		2
+/* Not parked - online */
+#define CPU_PARK_ONLINE		3
+
+static volatile unsigned int reparked_cpus[4];
+static volatile unsigned int mailbox_rdclr_phys_base;
+static void* volatile mailbox_rdclr_virt_base;
+
+static uint32_t _bcm2836_virt_to_phys(void* virt)
+{
+	uint32_t virt_page = ((uint32_t)virt) & ~(PAGE_SIZE - 1);
+	uint32_t virt_offs = ((uint32_t)virt) & (PAGE_SIZE - 1);
+	uint32_t pa;
+
+	asm volatile("mcr p15, 0, %0, c7, c8, 0" : : "r" (virt_page));
+	asm volatile("isb");
+	asm volatile("mrc p15, 0, %0, c7, c4, 0" : "=r" (pa));
+
+	if (pa & 1) {
+		return 0;
+	}
+
+	return (pa & 0xfffff000) | virt_offs;
+}
+
+void bcm2836_repark_loop(void) __attribute__((naked));
+void bcm2836_repark_loop_wrap(void) __attribute__((naked));
+
+void bcm2836_repark_loop_wrap(void)
+{
+	asm volatile (
+	"bcm2836_repark_loop:\n"
+	/* Disable IRQs */
+		"cpsid i\n"
+
+	/* Calculate physical to virtual offset */
+		"adr r0, .L_base_ptr\n"
+		"ldr r1, [r0]\n"
+		"subs r0, r0, r1         @ r0 = phy - virt\n"
+
+	/* Addresses to data from C */
+		"ldrne r1, .L_mailbox_rdclr_phys_base_ptr\n"
+		"movne r3, #1		@ CPU_PARK_NOMMU\n"
+		"ldreq r1, .L_mailbox_rdclr_virt_base_ptr\n"
+		"moveq r3, #2		@ CPU_PARK_MMU\n"
+		"add r1, r1, r0\n"
+		"ldr r1, [r1]\n"
+
+		"ldr r2, .L_reparked_cpus_ptr\n"
+		"add r2, r2, r0\n"
+
+	/* Calculate address to our MAILBOX3 read and clear register */
+		"mrc p15, 0, r0, c0, c0, 5  @ CPU number\n"
+		"and r0, r0, #3\n"
+		"add r2, r2, r0, lsl #2		@ r2 - reparked cpu flag\n"
+		"add r0, r1, r0, lsl #4		@ r0 - mailbox3 read & clear\n"
+
+	/* Set reparked CPU state */
+		"str r3, [r2]\n"
+
+	/* Wait for data in mailbox 3 */
+	"1:	wfi                        @ mailbox3 irq must be enabled\n"
+		"ldr r1, [r0]\n"
+		"cmp r1, #0\n"
+		"beq 1b\n"
+
+	/* Clear mailbox */
+		"str r1, [r0]\n"
+
+	/* Set reparked CPU state - online */
+		"mov r3, #3		@ CPU_PARK_ONLINE\n"
+		"str r3, [r2]\n"
+
+	/* Jump to start address read from mailbox */
+		"blx r1\n"
+
+	".L_base_ptr: .word .\n"
+	".L_mailbox_rdclr_phys_base_ptr: .word mailbox_rdclr_phys_base\n"
+	".L_mailbox_rdclr_virt_base_ptr: .word mailbox_rdclr_virt_base\n"
+	".L_reparked_cpus_ptr: .word reparked_cpus\n"
+	);
+}
+
+static bool bcm2836_cpu_can_disable(unsigned int cpunr)
+{
+	unsigned int gpu_int_routing;
+	unsigned int gpu_irq_target;
+	unsigned int gpu_fiq_target;
+
+	gpu_int_routing = readl(intc.base + LOCAL_GPU_ROUTING);
+	gpu_irq_target = gpu_int_routing & 0x3;
+	gpu_fiq_target = (gpu_int_routing >> 2) & 0x3;
+
+	if (cpunr == 0)
+		return false;
+
+	/*
+	 * Unfortunatelly this function is called on startup, before GPU FIQs are re-routed.
+	 * When it's called again from bcm2836_cpu_die it's too late to abort the CPU shutdown.
+	 * We know that irq-bcm2835.c will re-route FIQs to CPU#1 for dwc_otg (USB host), so just
+	 * tell it from the start, that disabling CPU#1 is not allowed
+	 */
+	if (cpunr == 1) 
+		return false;
+
+	if (gpu_irq_target == cpunr || gpu_fiq_target == cpunr)
+		return false;
+
+	return true;
+}
+
+static void bcm2836_cpu_die(unsigned int cpunr)
+{
+	void __iomem *timer_int_reg = intc.base + LOCAL_TIMER_INT_CONTROL0 + 4 * cpunr;
+	void __iomem *mailbox_int_reg = intc.base + LOCAL_MAILBOX_INT_CONTROL0 + 4 * cpunr;
+
+	if (!bcm2836_cpu_can_disable(cpunr)) {
+		pr_err("bcm2836: disabling CPU#%d with GPU interrupts routed\n",
+			cpunr);
+		/* It's too late to turn back */
+	}
+
+	/* Disable all timer interrupts */
+	writel(0, timer_int_reg);
+
+	/* Enable MAILBOX3 IRQ and disable all others */
+	writel((1<<3), mailbox_int_reg);
+
+	bcm2836_repark_loop_wrap();
+}
+
+static void bcm2836_smp_secondary_init(unsigned int cpunr)
+{
+	/* Disable MAILBOX3 IRQ */
+	bcm2836_arm_irqchip_mask_per_cpu_irq(LOCAL_MAILBOX_INT_CONTROL0, 3, cpunr);
+}
+
+static void bcm2836_smp_repark_cpu(unsigned int cpunr)
+{
+	unsigned long repark_loop_phys =
+		(unsigned long)virt_to_phys((void *)bcm2836_repark_loop);
+
+	pr_notice("bcm2836: reparking offline CPU#%d\n", cpunr);
+
+	smp_wmb();
+
+	writel(repark_loop_phys,
+	       intc.base + LOCAL_MAILBOX3_SET0 + 16 * cpunr);
+
+	udelay(10);
+	sync_cache_r(&reparked_cpus[cpunr]);
+
+	if (!reparked_cpus[cpunr]) {
+		pr_warning("bcm2836: failed to repark CPU#%d\n", cpunr);
+	}
+
+	bcm2836_arm_irqchip_unmask_per_cpu_irq(LOCAL_MAILBOX_INT_CONTROL0, 3, cpunr);
+}
+
+static void bcm2836_smp_prepare_cpus(unsigned int max_cpus)
+{
+	int cpunr;
+
+	pr_notice("bcm2836: prepare cpus called with max_cpus = %u\n", max_cpus);
+
+	mailbox_rdclr_virt_base = intc.base + LOCAL_MAILBOX3_CLR0;
+	mailbox_rdclr_phys_base = _bcm2836_virt_to_phys(mailbox_rdclr_virt_base);
+	__sync_cache_range_w(&mailbox_rdclr_phys_base, 8);
+
+	pr_notice("bcm2836: mailbox read/clear registers @0x%08x\n", mailbox_rdclr_phys_base);
+
+	for_each_present_cpu(cpunr) {
+		if (cpunr >= max_cpus) {
+			bcm2836_smp_repark_cpu(cpunr);
+		}
+	}
+}
+#endif
+
 #ifdef CONFIG_ARM
-static int __init bcm2836_smp_boot_secondary(unsigned int cpu,
+static int bcm2836_smp_boot_secondary(unsigned int cpu,
 					     struct task_struct *idle)
 {
 	unsigned long secondary_startup_phys =
 		(unsigned long)virt_to_phys((void *)secondary_startup);
 
+#ifdef CONFIG_BCM2836_CPU_REPARK
+	smp_rmb();
+	if (reparked_cpus[cpu] == CPU_PARK_NOT_PARKED || reparked_cpus[cpu] == CPU_PARK_NOMMU) {
+		writel(secondary_startup_phys,
+		       intc.base + LOCAL_MAILBOX3_SET0 + 16 * cpu);
+	}
+	else if (reparked_cpus[cpu] == CPU_PARK_MMU) {
+		writel((unsigned int) secondary_startup,
+		       intc.base + LOCAL_MAILBOX3_SET0 + 16 * cpu);
+	}
+	else {
+		pr_err("bcm2836: CPU#%d already online\n", cpu);
+		return -EBUSY;
+	}
+#else
 	writel(secondary_startup_phys,
 	       intc.base + LOCAL_MAILBOX3_SET0 + 16 * cpu);
+#endif
 
 	return 0;
 }
 
 static const struct smp_operations bcm2836_smp_ops __initconst = {
+#ifdef CONFIG_BCM2836_CPU_REPARK
+        .smp_prepare_cpus	= bcm2836_smp_prepare_cpus,
+        .smp_secondary_init	= bcm2836_smp_secondary_init,
+#ifdef CONFIG_HOTPLUG_CPU
+	.cpu_die		= bcm2836_cpu_die,
+	.cpu_can_disable	= bcm2836_cpu_can_disable,
+#endif
+#endif
 	.smp_boot_secondary	= bcm2836_smp_boot_secondary,
 };
 #endif
